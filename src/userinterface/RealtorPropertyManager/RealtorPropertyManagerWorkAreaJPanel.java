/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package userinterface.RealtorPropertyManager;

import Business.Customer.RealtorApartment;
import Business.Customer.ApartmentCatalog;
import business.ecosystem.Ecosystem;
import business.enterprise.RealtorEnterprise;
import business.enterprise.CustomerSupportEnterprise;
import business.enterprise.Enterprise;
import business.network.Network;
import business.organization.RealtorPropertyManagerOrganization;
import business.organization.Organization;
import business.organization.RealtorOrganization;
import business.useraccount.UserAccount;
import business.workqueue.RealtorCompanyWorkRequest;
import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Harsh
 */
public class RealtorPropertyManagerWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form RealtorPropertyManagerWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount account;
    private Organization organization;
    private Enterprise enterprise;
    private Ecosystem business;

    public RealtorPropertyManagerWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, Ecosystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = (RealtorPropertyManagerOrganization) organization;
        this.account = account;
        this.enterprise = (RealtorEnterprise) enterprise;
        this.business = business;
        valueLabel.setText(enterprise.getName());
        valueLabel1.setText(organization.getName());
        populateTable();

    }

    private void populateTable() {

        DefaultTableModel dtm = (DefaultTableModel) workRequestJTable.getModel();
        dtm.setRowCount(0);

        for (Network network : business.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {

                if (enterprise instanceof CustomerSupportEnterprise) {
                    for (Organization realtorOrganization : enterprise.getOrganizationDirectory().getOrganizationList()) {

                        if (realtorOrganization instanceof RealtorOrganization) {
                            ApartmentCatalog aptCatalog = ((RealtorOrganization) realtorOrganization).getAptCatalog();

                            for (RealtorApartment apt : aptCatalog.getListOfRealtorApartments()) {
                                Object[] row = new Object[5];
                                row[0] = apt.getRealtorApartmentId();
                                row[1] = apt.getApartmentType();
                                row[2] = apt.getHousingComplexType();
                                row[3] = apt.getQuantity();
                                row[4] = apt.getPrice();
                                dtm.addRow(row);

                            }
                        }
                    }
                }

            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        valueLabel = new javax.swing.JLabel();
        enterpriseLabel2 = new javax.swing.JLabel();
        refreshTestJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        apartmentTypeJComboBox = new javax.swing.JComboBox<>();
        housingComplexTypeJComboBox = new javax.swing.JComboBox<>();
        quantityJTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        valueLabel1 = new javax.swing.JLabel();
        enterpriseLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        createRealtorAptjButton = new javax.swing.JButton();
        sellAptjButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "RealtorApartmentID", "Brand", "Model Number", "Quantity", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 520, 690, 160));

        valueLabel.setFont(new java.awt.Font("Palatino", 1, 18)); // NOI18N
        valueLabel.setText("<value>");
        add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 180, 340, 26));

        enterpriseLabel2.setFont(new java.awt.Font("Palatino", 1, 18)); // NOI18N
        enterpriseLabel2.setText("Enterprise :");
        add(enterpriseLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 180, -1, 30));

        refreshTestJButton.setBackground(new java.awt.Color(204, 204, 255));
        refreshTestJButton.setFont(new java.awt.Font("Palatino", 1, 18)); // NOI18N
        refreshTestJButton.setText("Refresh");
        refreshTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });
        add(refreshTestJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 470, 210, 40));

        backJButton.setBackground(new java.awt.Color(204, 204, 255));
        backJButton.setFont(new java.awt.Font("Palatino", 1, 18)); // NOI18N
        backJButton.setText("Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, 100, 50));

        apartmentTypeJComboBox.setFont(new java.awt.Font("Palatino", 1, 18)); // NOI18N
        apartmentTypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Studio", "2BHK", "3BHK" }));
        apartmentTypeJComboBox.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        apartmentTypeJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apartmentTypeJComboBoxActionPerformed(evt);
            }
        });
        add(apartmentTypeJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 210, 270, -1));

        housingComplexTypeJComboBox.setFont(new java.awt.Font("Palatino", 1, 18)); // NOI18N
        housingComplexTypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Avalon Residences", "Windsor at Oak Grove", "Burbank Apartments", "Church Park Luxury Apartments" }));
        housingComplexTypeJComboBox.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        housingComplexTypeJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                housingComplexTypeJComboBoxActionPerformed(evt);
            }
        });
        add(housingComplexTypeJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 260, 270, -1));

        quantityJTextField.setFont(new java.awt.Font("ITF Devanagari Marathi", 1, 14)); // NOI18N
        quantityJTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        quantityJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityJTextFieldActionPerformed(evt);
            }
        });
        add(quantityJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 310, 150, 30));

        jLabel1.setFont(new java.awt.Font("Palatino", 1, 18)); // NOI18N
        jLabel1.setText("Apartment Type");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 210, -1, -1));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel2.setText("Realtor Property Manager Work Area");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 30, -1, -1));

        jLabel3.setFont(new java.awt.Font("Palatino", 1, 18)); // NOI18N
        jLabel3.setText("Model Number");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 270, -1, -1));

        jLabel4.setFont(new java.awt.Font("Palatino", 1, 18)); // NOI18N
        jLabel4.setText("Quantity");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 320, -1, 20));

        valueLabel1.setFont(new java.awt.Font("Palatino", 1, 18)); // NOI18N
        valueLabel1.setText("<value>");
        add(valueLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 230, 320, -1));

        enterpriseLabel3.setFont(new java.awt.Font("Palatino", 1, 18)); // NOI18N
        enterpriseLabel3.setText("Organization:");
        add(enterpriseLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, -1, 40));
        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, -30, -1, -1));

        createRealtorAptjButton.setBackground(new java.awt.Color(204, 204, 255));
        createRealtorAptjButton.setText("Create Realtor Apartment");
        createRealtorAptjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRealtorAptjButtonActionPerformed(evt);
            }
        });
        add(createRealtorAptjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 360, -1, -1));

        sellAptjButton.setBackground(new java.awt.Color(204, 204, 255));
        sellAptjButton.setText("Sell Apartment Request");
        sellAptjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellAptjButtonActionPerformed(evt);
            }
        });
        add(sellAptjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 700, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void refreshTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed
        populateTable();


    }//GEN-LAST:event_refreshTestJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void createCarModel1JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCarModelJButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_createCarModelJButton1ActionPerformed

    private void createRealtorAptjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRealtorAptjButtonActionPerformed
        // TODO add your handling code here:
        String quantity = quantityJTextField.getText();
         // validating the fields of the inventory
        if (quantity.matches("[0-9]+")) {
            //continue
        } else {
            JOptionPane.showMessageDialog(null, "Please enter a number for the quantity field", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        RealtorApartment realtorApartment = null;

        for (Network network : business.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {

                if (enterprise instanceof CustomerSupportEnterprise) {
                    for (Organization realtorOrganization : enterprise.getOrganizationDirectory().getOrganizationList()) {

                        if (realtorOrganization instanceof RealtorOrganization) {
                            ApartmentCatalog aptCatalog = ((RealtorOrganization) realtorOrganization).getAptCatalog();

                            realtorApartment = aptCatalog.addRealtorApartment();

                        }

                        if (realtorApartment != null) {
                            float price = 0;

                            realtorApartment.setApartmentType(apartmentTypeJComboBox.getSelectedItem().toString());
                            realtorApartment.setHousingComplexType((housingComplexTypeJComboBox.getSelectedItem().toString()));
                            realtorApartment.setQuantity(Integer.parseInt(quantityJTextField.getText()));

                            if (realtorApartment.getApartmentType().equalsIgnoreCase("Studio")) {
                                if (realtorApartment.getHousingComplexType().equalsIgnoreCase("Avalon Residences")) {
                                    price = price + 400000;
                                }
                                if (realtorApartment.getHousingComplexType().equalsIgnoreCase("Windsor at Oak Grove")) {
                                    price = price + 450000;
                                }
                                if (realtorApartment.getHousingComplexType().equalsIgnoreCase("Burbank Apartments")) {
                                    price = price +420000;
                                }
                                 if (realtorApartment.getHousingComplexType().equalsIgnoreCase("Church Park Luxury Apartments")) {
                                    price = price + 350000;
                                }
                                
                            }
                            if (realtorApartment.getApartmentType().equalsIgnoreCase("2BHK")) {
                                if (realtorApartment.getHousingComplexType().equalsIgnoreCase("Avalon Residences")) {
                                    price = price + 650000;
                                }
                                if (realtorApartment.getHousingComplexType().equalsIgnoreCase("Windsor at Oak Grove")) {
                                    price = price + 650000;
                                }
                                if (realtorApartment.getHousingComplexType().equalsIgnoreCase("Burbank Apartments")) {
                                    price = price +685000;
                                }
                                 if (realtorApartment.getHousingComplexType().equalsIgnoreCase("Church Park Luxury Apartments")) {
                                    price = price + 610000;
                                }
                                
                            }
                            
                            if (realtorApartment.getApartmentType().equalsIgnoreCase("3BHK")) {
                                if (realtorApartment.getHousingComplexType().equalsIgnoreCase("Avalon Residences")) {
                                    price = price + 850000;
                                }
                                if (realtorApartment.getHousingComplexType().equalsIgnoreCase("Windsor at Oak Grove")) {
                                    price = price + 870000;
                                }
                                if (realtorApartment.getHousingComplexType().equalsIgnoreCase("Burbank Apartments")) {
                                    price = price +900000;
                                }
                                 if (realtorApartment.getHousingComplexType().equalsIgnoreCase("Church Park Luxury Apartments")) {
                                    price = price + 800000;
                                }
                                
                            }

                            realtorApartment.setPrice(price);
                        }
                    }

                }
            }
        }

        populateTable();


    }//GEN-LAST:event_createRealtorAptjButtonActionPerformed

    private void sellAptjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellAptjButtonActionPerformed
        // TODO add your handling code here:
                                
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from table first ", "Warning", JOptionPane.WARNING_MESSAGE);

            return;
        }

        int rcId = (int) workRequestJTable.getValueAt(selectedRow, 0);
        RealtorApartment apt = null;
        for (Network network : business.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {

                if (enterprise instanceof CustomerSupportEnterprise) {
                    for (Organization realtorOrganization : enterprise.getOrganizationDirectory().getOrganizationList()) {

                        if (realtorOrganization instanceof RealtorOrganization) {
                            ApartmentCatalog aptCatalog = ((RealtorOrganization) realtorOrganization).getAptCatalog();
                            for (RealtorApartment c : aptCatalog.getListOfRealtorApartments()) {
                                if (c.getRealtorApartmentId() == rcId) {
                                    apt = c;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }

        RealtorCompanyWorkRequest rcswr = new RealtorCompanyWorkRequest();
        rcswr.setRealtorApartment(apt);
        rcswr.setSender(account);
        rcswr.setStatus("Sent to Realtor");
        account.getWorkQueue().getWorkRequestList().add(rcswr);

        for (Network network : business.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise instanceof CustomerSupportEnterprise) {
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (organization instanceof RealtorOrganization) {

                            organization.getWorkQueue().getWorkRequestList().add(rcswr);

                        }
                    }
                }
            }
        }
        JOptionPane.showMessageDialog(null, "Apartment sent to realtor staff for Sales", "Information!!", JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_sellAptjButtonActionPerformed

    private void quantityJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityJTextFieldActionPerformed

    private void housingComplexTypeJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_housingComplexTypeJComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_housingComplexTypeJComboBoxActionPerformed

    private void apartmentTypeJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apartmentTypeJComboBoxActionPerformed

        final DefaultComboBoxModel studioHousingComplexTypeJComboBox = new DefaultComboBoxModel(new String[]{"Avalon Residences", "Windsor at Oak Grove", "Burbank Apartments", "Church Park Luxury Apartments"});
        final DefaultComboBoxModel bhk2HousingComplexTypeJComboBox = new DefaultComboBoxModel(new String[]{"Avalon Residences", "Windsor at Oak Grove", "Burbank Apartments", "Church Park Luxury Apartments"});
        final DefaultComboBoxModel bhk3HousingComplexTypeJComboBox = new DefaultComboBoxModel(new String[]{"Avalon Residences", "Windsor at Oak Grove", "Burbank Apartments", "Church Park Luxury Apartments"});

        apartmentTypeJComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (apartmentTypeJComboBox.getSelectedItem().equals("Studio")) {
                    housingComplexTypeJComboBox.setModel(studioHousingComplexTypeJComboBox);

                } else if(apartmentTypeJComboBox.getSelectedItem().equals("2BHK")){
                    housingComplexTypeJComboBox.setModel(bhk2HousingComplexTypeJComboBox);
                }
                else {
                    housingComplexTypeJComboBox.setModel(bhk3HousingComplexTypeJComboBox);
                }

            }

        });
    }//GEN-LAST:event_apartmentTypeJComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> apartmentTypeJComboBox;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton createRealtorAptjButton;
    private javax.swing.JLabel enterpriseLabel2;
    private javax.swing.JLabel enterpriseLabel3;
    private javax.swing.JComboBox<String> housingComplexTypeJComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField quantityJTextField;
    private javax.swing.JButton refreshTestJButton;
    private javax.swing.JButton sellAptjButton;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JLabel valueLabel1;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
